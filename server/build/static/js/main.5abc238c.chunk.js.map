{"version":3,"sources":["cookie.js","components/Home.jsx","components/Auth.jsx","components/Register.jsx","components/Login.jsx","components/MainLogin.jsx","components/NotFound.jsx","Routes.jsx","RouterRoot.jsx","App.jsx","serviceWorker.js","index.js"],"names":["setCookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toGMTString","document","cookie","getCookie","name","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","deleteCookie","Home","logout","window","location","href","react_default","a","createElement","Link","to","onClick","this","React","Component","Auth","query","queryString","parser","search","console","log","Register","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onAppnameChange","e","setState","appname","target","value","onRedirectUrlChange","redirect_url","onButtonClick","axios","method","data","state","url","then","res","alert","catch","err","type","onChange","Login","onUsernameChange","username","onPasswordChange","password","parse","client_id","scope","concat","clent_id","MainLogin","components_Login","NotFound","Routes","returnBool","path","params","ifFalse","ifTrue","Switch","build_default","exact","component","Route","RouterRoot","BrowserRouter","src_Routes","App","className","src_RouterRoot","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5abc238c.chunk.js","sourcesContent":["function setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = 'expires=' + d.toGMTString();\n    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';\n}\n  \nfunction getCookie(cname) {\n    var name = cname + '=';\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return '';\n}\n\nfunction deleteCookie(name) {\n    setCookie(name, 'delete', 0);\n}\n\nconst cookie = {\n    setCookie,\n    getCookie,\n    deleteCookie,\n}\n\nexport default cookie;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport cookie from '../cookie';\n\nclass Home extends React.Component {\n    logout = () => {\n        cookie.deleteCookie('user_id');\n        window.location.href = '/login';\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Sample Service</h1>\n                <h2>This is sample service home page.</h2> \n                <button><Link to='/register'>Register App</Link></button>\n                <button onClick={this.logout}>Logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport queryString from 'query-string';\n\nclass Auth extends React.Component {\n    componentWillMount() {\n        const query = queryString.parser(window.location.search);\n        console.log(query);\n    }\n}\n\nexport default Auth;","import React from 'react';\nimport axios from 'axios';\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appname: '',\n            redirect_url: '',\n        }\n    }\n\n    onAppnameChange = (e) => {\n        this.setState({\n            appname: e.target.value,\n        })\n    }\n\n    onRedirectUrlChange = (e) => {\n        this.setState({\n            redirect_url: e.target.value,\n        })\n    }\n\n    onButtonClick = () => {\n        axios({\n            method: 'post',\n            data: {\n                appname: this.state.appname,\n                redirect_url: this.state.redirect_url,\n            },\n            url: 'http://localhost:3002/api/sign/app'\n        })\n        .then(function(res) {\n            alert('App register succeeded.');\n        })\n        .catch(function(err) {\n            alert(err);\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Register Your App</h1>\n                <label>App Name</label>\n                <input type='text' onChange={this.onAppnameChange} />\n                <br/>\n                <label>Redirect URL</label>\n                <input type='text' onChange={this.onRedirectUrlChange}/>\n                <br/>\n                <button onClick={this.onButtonClick}>Create</button>\n            </div>\n        )\n    }\n}\n\nexport default Register;","import React from 'react';\nimport axios from 'axios';\nimport cookie from '../cookie';\nimport queryString from 'query-string';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n        }\n    }\n\n    onUsernameChange = (e) => {\n        this.setState({\n            username: e.target.value,\n        })\n    }\n\n    onPasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        })\n    }\n\n    onButtonClick = () => {\n        const query = queryString.parse(window.location.search);\n        axios({\n            method: 'post',\n            data: {\n                username: this.state.username,\n                password: this.state.password,\n            },\n            url: this.props.url,\n        })\n        .then(function(res) {\n            cookie.setCookie('user_id', res.data, 3);\n            if(query.client_id && query.state && query.redirect_url && query.scope) {\n                window.location.href = `/auth?client_id=${query.clent_id}&state=${query.state}&scope=${query.scope}&redirect_url=${query.redirect_url}`;\n            }\n            window.location.href = '/';\n        })\n        .catch(function(err) {\n            alert(err);\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <label>Username</label>\n                <input type='text' onChange={this.onUsernameChange}/>\n                <br/>\n                <label>Password</label>\n                <input type='password' onChange={this.onPasswordChange}/>\n                <br/>\n                <button onClick={this.onButtonClick}>Login</button>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React from 'react';\nimport Login from './Login.jsx';\n\nclass MainLogin extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>To the Sample Service</h1>\n                <Login url='http://localhost:3002/api/sign/login'/>\n            </div>\n        )\n    }\n}\n\nexport default MainLogin;","import React from 'react';\n\nclass NotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>404 Not Found</h1>\n            </div>\n        )\n    }\n}\n\nexport default NotFound;","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport NG from 'react-navigation-guard';\nimport cookie from './cookie';\n\nimport Home from './components/Home.jsx';\nimport Auth from './components/Auth.jsx';\nimport Register from './components/Register.jsx';\nimport MainLogin from './components/MainLogin.jsx';\nimport NotFound from './components/NotFound.jsx';\n\nclass Routes extends React.Component {\n    returnBool = (path, url, params) => {\n        if(cookie.getCookie('user_id')) {\n           return true; \n        } else return false;\n    }\n\n    ifFalse = (path, url, params) => {\n        if(path !== '/login') {\n            alert('Please login first.')\n            window.location.href = '/login';\n        }\n    }\n\n    ifTrue = (path, url, params) => {\n        if(path === '/login') {\n            alert('You are already signed in.');\n            window.location.href = '/';\n        }\n    }\n\n    render() {\n        return (\n            <Switch>\n                <NG path='/' exact={true} component={Home} returnBool={this.returnBool} ifFalse={this.ifFalse} ifTrue={this.ifTrue}/>\n                <NG path='/auth' exact={true} component={Auth} returnBool={this.returnBool} ifFalse={this.ifFalse} ifTrue={this.ifTrue}/>\n                <NG path='/register' exact={true} component={Register} returnBool={this.returnBool} ifFalse={this.ifFalse} ifTrue={this.ifTrue}/>\n                <NG path='/login' exact={true} component={MainLogin} returnBool={this.returnBool} ifFalse={this.ifFalse} ifTrue={this.ifTrue}/>\n                <Route component={NotFound}/>\n            </Switch>\n        )\n    }\n}\n\nexport default Routes;","import React from 'react';\nimport Routes from './Routes.jsx';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nclass RouterRoot extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Routes/>\n            </Router>\n        )\n    }\n}\n\nexport default RouterRoot;","import React from 'react';\nimport RouterRoot from './RouterRoot.jsx';\n\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className='App'>\n                <RouterRoot/>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}