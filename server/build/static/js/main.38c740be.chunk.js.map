{"version":3,"sources":["cookie.js","component/Home.jsx","component/Auth.jsx","component/Login.jsx","Routes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["setCookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toGMTString","document","cookie","getCookie","name","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","deleteCookie","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getEmail","email","setState","state","headers","Authorization","concat","axios","method","url","then","res","data","catch","err","alert","react_default","a","createElement","React","Component","Auth","query","qs","parse","window","location","search","code","href","console","log","queryString","stringify","client_id","client_secret","redirect_url","Login","buttonClick","rs","generate","scope","onClick","NotFound","Routes","returnBool","params","ifFalse","blockRender","ifTrue","Switch","build_default","exact","path","component","Route","App","className","BrowserRouter","src_Routes","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAAA,SAASA,EAAUC,EAAOC,EAAQC,GAC9B,IAAIC,EAAI,IAAIC,KACZD,EAAEE,QAAQF,EAAEG,UAAoB,GAAPJ,EAAU,GAAG,GAAG,KACzC,IAAIK,EAAU,WAAaJ,EAAEK,cAC7BC,SAASC,OAASV,EAAQ,IAAMC,EAAS,IAAMM,EAAU,UAuB7D,IAMeG,EANA,CACXX,YACAY,UAtBJ,SAAmBX,GAIf,IAHA,IAAIY,EAAOZ,EAAQ,IAEfa,EADgBC,mBAAmBL,SAASC,QACzBK,MAAM,KACrBC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAAK,CAE/B,IADA,IAAIE,EAAIL,EAAGG,GACY,MAAhBE,EAAEC,OAAO,IACZD,EAAIA,EAAEE,UAAU,GAEpB,GAAwB,IAApBF,EAAEG,QAAQT,GACV,OAAOM,EAAEE,UAAUR,EAAKK,OAAQC,EAAED,QAG1C,MAAO,IAUPK,aAPJ,SAAsBV,GAClBb,EAAUa,EAAM,SAAU,sBCsBfW,cAzCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,SAAW,SAACC,GACRR,EAAKS,SAAS,CACVD,WAPJR,EAAKU,MAAQ,CACTF,MAAO,IAHIR,oFAcf,IAAMO,EAAWJ,KAAKI,SAChBI,EAAU,CACZC,cAAa,UAAAC,OAAY5B,EAAOC,UAAU,WAE9C4B,IAAM,CACFC,OAAQ,MACRC,IAAK,sCACLL,YAEHM,KAAK,SAASC,GACXX,EAASW,EAAIC,KAAKX,SAErBY,MAAM,SAASC,GACZC,MAAMD,sCAKV,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,mCAA2BtB,KAAKO,MAAMF,MAAtC,aApCGkB,IAAMC,4BCgDVC,+LAzCP,IAAMC,EAAQC,IAAGC,MAAMC,OAAOC,SAASC,QACvC,IAAIL,EAAMM,OAASN,EAAMnB,MAErB,OADAY,MAAM,wBACCU,OAAOC,SAASG,KAAO,IAElC,GAAGP,EAAMnB,QAAUzB,EAAOC,UAAU,YAKhC,OAJAmD,QAAQC,IAAIT,EAAMnB,OAClB2B,QAAQC,IAAIrD,EAAOC,UAAU,aAC7BmD,QAAQC,IAAItD,SAASC,QACrBqC,MAAM,yBACCU,OAAOC,SAASG,KAAO,IAE9B,IAAMG,EAAcT,IAAGU,UAAU,CAC7BC,UAnBE,mCAoBFC,cAnBM,mCAoBNC,aAnBK,mCAoBLR,KAAMN,EAAMM,KACZzB,MAAOmB,EAAMnB,QAEjBI,IAAM,CACFC,OAAQ,MACRC,IAAG,wCAAAH,OAA0C0B,KAEhDtB,KAAK,SAASC,GAEX,OADAjC,EAAOX,UAAU,QAAS4C,EAAIC,KAAM,KAC7Ba,OAAOC,SAASG,KAAO,MAEjChB,MAAM,SAASC,GAEZ,OADAC,MAAMD,GACCW,OAAOC,SAASG,KAAO,4CAMtC,OACIb,EAAAC,EAAAC,cAAA,mBAtCOC,IAAMC,4BCoCViB,cAvCX,SAAAA,EAAY7C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IACf5C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAtC,KAAAH,KAAMJ,KAgBV8C,YAAc,WACV,IAAMnC,EAAQoC,IAAGC,WACjB9D,EAAOX,UAAU,WAAYoC,EAAO,GACpC,IAAMmB,EAAQC,IAAGU,UAAU,CACvBC,UAAWzC,EAAKU,MAAM+B,UACtBE,aAAc3C,EAAKU,MAAMiC,aACzBK,MAAOhD,EAAKU,MAAMsC,MAClBtC,UAEJsB,OAAOC,SAASG,KAAhB,sCAAAvB,OAA6DgB,IAxB7D7B,EAAKU,MAAQ,CACT+B,UAAW,GACXE,aAAc,GACdK,MAAO,IALIhD,oFAUfG,KAAKM,SAAS,CACVgC,UAAW,mCACXE,aAAc,mCACdK,MAAO,2CAiBX,OACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,UAAQwB,QAAS9C,KAAK0C,aAAtB,qCAlCInB,IAAMC,WCIpBuB,mLAEE,OACI3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCAJOC,IAAMC,WA8CdwB,6MAnCXC,WAAa,SAACpC,EAAKqC,GACf,QAAIpE,EAAOC,UAAU,YAOzBoE,QAAU,SAACtC,EAAKqC,EAAQE,GACT,WAARvC,IACCuC,IACAjC,MAAM,sBACNU,OAAOC,SAASG,KAAO,aAI/BoB,OAAS,SAACxC,EAAKqC,EAAQE,GACnB,GAAW,WAARvC,EAEC,OADAM,MAAM,yBACCU,OAAOC,SAASG,KAAO,6EAKlC,OACIb,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACIlC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAImC,OAAO,EAAMH,OAAQrD,KAAKqD,OAAQF,QAASnD,KAAKmD,QAASF,WAAYjD,KAAKiD,WAAYQ,KAAK,IAAIC,UAAW/D,IAC9GyB,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,cAAcC,UAAWjC,IAC3CL,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAImC,OAAO,EAAMH,OAAQrD,KAAKqD,OAAQF,QAASnD,KAAKmD,QAASF,WAAYjD,KAAKiD,WAAYQ,KAAK,SAASC,UAAWjB,IACnHrB,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOD,UAAWX,YA9BbxB,IAAMC,WCDZoC,2LAVX,OACExC,EAAAC,EAAAC,cAAA,OAAKuC,UAAU,OACbzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,eALQvC,cCMEwC,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASxF,SAASyF,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.38c740be.chunk.js","sourcesContent":["function setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = 'expires=' + d.toGMTString();\n    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';\n}\n  \nfunction getCookie(cname) {\n    var name = cname + '=';\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return '';\n}\n\nfunction deleteCookie(name) {\n    setCookie(name, 'delete', 0);\n}\n\nconst cookie = {\n    setCookie,\n    getCookie,\n    deleteCookie,\n}\n\nexport default cookie;","import React from 'react';\nimport cookie from '../cookie';\nimport axios from 'axios';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n        }\n    }\n\n    getEmail = (email) => {\n        this.setState({\n            email,\n        })\n    }\n\n    componentWillMount() {\n        const getEmail = this.getEmail;\n        const headers = {\n            Authorization: `bearer ${cookie.getCookie('token')}`\n        }\n        axios({\n            method: 'get',\n            url: 'http://localhost:3002/api/get/email',\n            headers,\n        })\n        .then(function(res) {\n            getEmail(res.data.email);\n        })\n        .catch(function(err) {\n            alert(err);\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Sample Application</h1>\n                <h2>Hi user! Is you email {this.state.email}?</h2>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport cookie from '../cookie';\nimport axios from 'axios';\nimport qs from 'query-string';\n\nconst client_id = '9x3bEdlVe9XS1fQ5P0BohJHbow88vO8X';\nconst client_secret = 'VEJNF6HcuOWWpkRxB376bvqzK5pKhMza';\nconst redirect_url = 'http://localhost:3001/login/auth';\n\nclass Auth extends React.Component {\n    componentWillMount() {\n        const query = qs.parse(window.location.search);\n        if(!query.code || !query.state) {\n            alert('unallowed connection');\n            return window.location.href = '/';\n        }\n        if(query.state !== cookie.getCookie('newstate')) {\n            console.log(query.state);\n            console.log(cookie.getCookie('newstate'));\n            console.log(document.cookie);\n            alert('invalid authorization');\n            return window.location.href = '/';\n        } else {\n            const queryString = qs.stringify({\n                client_id,\n                client_secret,\n                redirect_url,\n                code: query.code,\n                state: query.state,\n            })\n            axios({\n                method: 'get',\n                url: `http://localhost:3002/api/auth/token?${queryString}`,\n            })\n            .then(function(res) {\n                cookie.setCookie('token', res.data, 100);\n                return window.location.href = '/';\n            })\n            .catch(function(err) {\n                alert(err);\n                return window.location.href = '/login';\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default Auth;","import React from 'react';\nimport rs from 'randomstring';\nimport cookie from '../cookie';\nimport qs from 'query-string';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            client_id: '',\n            redirect_url: '',\n            scope: '',\n        }\n    }\n\n    componentWillMount() {\n        this.setState({\n            client_id: '9x3bEdlVe9XS1fQ5P0BohJHbow88vO8X',\n            redirect_url: 'http://localhost:3001/login/auth',\n            scope: 'email',\n        })\n    }\n\n    buttonClick = () => {\n        const state = rs.generate();\n        cookie.setCookie('newstate', state, 1);\n        const query = qs.stringify({\n            client_id: this.state.client_id,\n            redirect_url: this.state.redirect_url,\n            scope: this.state.scope,\n            state,\n        })\n        window.location.href = `http://localhost:3002/api/auth/app?${query}`\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Sample Application</h1>\n                <button onClick={this.buttonClick}>Login with Sample Service</button>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport NG from 'react-navigation-guard';\nimport cookie from './cookie';\n\nimport Home from './component/Home';\nimport Auth from './component/Auth';\nimport Login from './component/Login';\n\nclass NotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>404 Not Found</h1>\n            </div>\n        )\n    }\n}\n\nclass Routes extends React.Component {\n    returnBool = (url, params) => {\n        if(!cookie.getCookie('token')) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    ifFalse = (url, params, blockRender) => {\n        if(url !== '/login') {\n            blockRender();\n            alert('Please login first');\n            window.location.href = '/login';\n        }\n    }\n\n    ifTrue = (url, params, blockRender) => {\n        if(url === '/login') {\n            alert('You already logged-in');\n            return window.location.href = '/';\n        }\n    }\n\n    render() {\n        return (\n            <Switch>\n                <NG exact={true} ifTrue={this.ifTrue} ifFalse={this.ifFalse} returnBool={this.returnBool} path='/' component={Home} />\n                <Route exact path='/login/auth' component={Auth} />\n                <NG exact={true} ifTrue={this.ifTrue} ifFalse={this.ifFalse} returnBool={this.returnBool} path='/login' component={Login} />\n                <Route component={NotFound} />\n            </Switch>\n        )\n    }\n}\n\nexport default Routes;","import React, { Component } from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from './Routes';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <BrowserRouter>\n          <Routes />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}